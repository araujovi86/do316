---
# NOTE: This playbook requires that the following playbooks run BEFORE via the lab script
# - playbooks/deploy-virtctl.yml

- name: Create VMs and DataVolumes
  hosts: utility
  gather_facts: false

  module_defaults:
    group/kubernetes.core.k8s:
      host: "{{ ocp_cluster['host'] }}"
      kubeconfig: "{{ ocp_cluster['kubeconfig'] }}"
      validate_certs: "{{ ocp_cluster['validate_certs'] }}"

  vars:
    dv_namespace: vm-images
    vm_namespace:
      # - "{{ dv_namespace }}"
      - development-db
      - staging-db
    vm_name: mariadb
    vm_app: mariadb
    vm_qcow2: mariadb-server.qcow2
    vm_size: 15Gi
    users:
      - dbadmin1
      - dbadmin2
      - developer

  tasks:

    - name: "Create project {{ item }}"
      kubernetes.core.k8s:
        state: present
        inline:
          apiVersion: project.openshift.io/v1
          kind: Project
          metadata:
            name: "{{ item }}"
      loop: "{{ [dv_namespace, vm_namespace] | flatten }}"

    # - name: Create ClusterRole, ClusterRoleBinding, RoleBinding
    #   ansible.builtin.include_tasks: role-tasks.yml

    - name: Create RBAC to allow VNC console access
      kubernetes.core.k8s:
        state: present
        definition: "{{ item }}"
      register: rbac_vnc
      loop: "{{ lookup('ansible.builtin.file', 'rbac-allow-vnc.yaml') | from_yaml_all }}"

    - name: Create RBAC to allow DataVolume clone
      kubernetes.core.k8s:
        state: present
        definition: "{{ item }}"
      register: rbac_clone
      loop: "{{ lookup('ansible.builtin.file', 'rbac-allow-clone.yaml') | from_yaml_all }}"

    - name: "Create VM and DV '{{ vm_name }}'"
      kubernetes.core.k8s:
        state: present
        namespace: "{{ dv_namespace }}"
        wait: true
        wait_condition:
          type: Ready
          status: "True"
        wait_sleep: "{{ wait_sleep }}"
        wait_timeout: "{{ wait_timeout }}"
        inline:
          apiVersion: kubevirt.io/v1
          kind: VirtualMachine
          metadata:
            name: "{{ vm_name }}"
            namespace: "{{ dv_namespace }}"
            labels:
              app: "{{ vm_app }}"
              kubevirt.io/vm: "{{ vm_name }}"
              flavor.template.kubevirt.io/small: 'true'
              os.template.kubevirt.io/rhel8.4: 'true'
              vm.kubevirt.io/template: rhel8-server-small
              vm.kubevirt.io/template.namespace: openshift
              vm.kubevirt.io/template.revision: '1'
              vm.kubevirt.io/template.version: v0.26.2
              workload.template.kubevirt.io/server: 'true'
          spec:
            dataVolumeTemplates:
              - apiVersion: cdi.kubevirt.io/v1beta1
                kind: DataVolume
                metadata:
                  name: "{{ vm_name }}"
                spec:
                  pvc:
                    accessModes:
                      - "{{ vm_access_mode }}"
                    resources:
                      requests:
                        storage: "{{ vm_size }}"
                    storageClassName: "{{ vm_sc_name }}"
                    volumeMode: "{{ vm_sc_mode }}"
                  source:
                    http:
                      url: "{{ utility_url }}{{ vm_qcow2 }}"
            runStrategy: RerunOnFailure
            template:
              metadata:
                labels:
                  app: "{{ vm_app }}"
                  flavor.template.kubevirt.io/small: 'true'
                  kubevirt.io/domain: "{{ vm_name }}"
                  kubevirt.io/size: small
                  os.template.kubevirt.io/rhel8.4: 'true'
                  workload.template.kubevirt.io/server: 'true'
              spec:
                domain:
                  cpu:
                    cores: 1
                    sockets: 1
                    threads: 1
                  devices:
                    disks:
                      - name: "{{ vm_name }}"
                        bootOrder: 1
                        disk:
                          bus: virtio
                      - name: cloudinitdisk
                        disk:
                          bus: virtio
                    interfaces:
                      - name: default
                        model: virtio
                        masquerade: {}
                    networkInterfaceMultiqueue: true
                    rng: {}
                  machine:
                    type: pc-q35-rhel8.4.0
                  resources:
                    requests:
                      memory: 2Gi
                evictionStrategy: LiveMigrate
                hostname: "{{ vm_name }}"
                networks:
                  - name: default
                    pod: {}
                terminationGracePeriodSeconds: 180
                volumes:
                  - name: "{{ vm_name }}"
                    dataVolume:
                      name: "{{ vm_name }}"
                  - name: cloudinitdisk
                    cloudInitNoCloud:
                      userData: |-
                        #cloud-config
                        user: developer
                        password: developer
                        chpasswd: { expire: False }
                        ssh_authorized_keys:
                          - {{ lab_rsa }}
                        swap:
                          filename: /swap
                          size: "auto"
                          maxsize: 2000000
                        write_files:
                          - path: /var/stress-load.sh
                            permissions: '0750'
                            owner: root:root
                            defer: true
                            content: |
                              #!/bin/bash
                              stress -c 2 -d 6 -i 2 -m 4 --vm-bytes 256M -t 60s
                          - path: /etc/cron.d/stress
                            permissions: '0644'
                            owner: root:root
                            defer: true
                            content: |
                              */1 * * * * root /var/stress-load.sh
                        power_state:
                          delay: 1
                          mode: poweroff
                          timeout: 60

    - name: Pause to allow mariadb image time to customize
      ansible.builtin.pause:
        minutes: 1

    # FIXME: Convert to 'kubernetes.core.k8s'
    - name: Delete VM and preserve DV
      ignore_errors: true
      ansible.builtin.command:
        cmd: "oc delete vm {{ vm_name }} -n {{ dv_namespace }} --ignore-not-found --wait --cascade=orphan"

    # # FIXME: Convert to 'kubernetes.core.k8s'
    # - name: Delete VMI
    #   ignore_errors: true
    #   ansible.builtin.command:
    #     cmd: "oc delete vmi {{ vm_name }} -n {{ dv_namespace }} --ignore-not-found --wait"

    - name: Delete VMI
      kubernetes.core.k8s:
        state: absent
        api_version: kubevirt.io/v1
        kind: VirtualMachineInstance
        name: "{{ item }}"
        namespace: "{{ dv_namespace }}"
        wait: true
      loop:
        - "{{ vm_name }}"
